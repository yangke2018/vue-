参考资料
https://blog.csdn.net/lzb348110175/article/details/89219339

Vue-Router导航钩子
    Vue-Router导航钩子。有如下三种方式可以植入路由导航中
        ①全局的守卫

        ②单个路由独享的守卫

        ③组件内的守卫

        优先级：①>②>③，组件内的守卫优先级是最低的
        
 一、全局的守卫
        包括全局前置守卫、全局解析钩子(2.5.0新增)、全局后置钩子两种。
        全局前置守卫
        //你可以使用router.beforeEach注册一个全局前置守卫：
        const router = new VueRouter({...})
        router.beforeEach((to,from,next) =>{
            //...
        })
        
        前置守卫接受三个参数：
        ● to：即将要进入的目标路由对象
        ● from：当前导航正要离开的路由
        ● next：一定要调用该方法来resolve这个钩子。执行效果以来next方法的调用参数
          ① next()：进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是confirmed(确认的)
          ② next('/') 或者 next({path:'/'})：跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向next传递任何位置对象，且允许设置诸如replace:true、name:'home'之类的选项以及任何用在router-link的to属性或者router.push中的选项。
          ③ next(error)：(2.4.0新增)如果传入next的参数是一个Error实例，则导航会被终止，且该错误会被传递给router.onError()注册过的毁掉
        确保要调用next方法，否则钩子就不会被resolved
        
        全局解析守卫
        在 2.5.0+ 你可以用router.beforeResolve 注册一个全局守卫。这和router.beforeEach类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。
        
        全局后置守卫        
        router.afterEach((to,from)=>{
           //...
        })
         不同的是，后置守卫不会接收next函数，也不会改变导航本身

 二、单个路由独享的守卫
   单个路由独享的守卫，可以再单个路由中直接定义（方法成、参数等都和全局前置守卫一样）
   const router = new VueRouter({
      routes: [
        {
          path: '/foo',
          component: Foo,
          beforeEnter: (to, from, next) => {
            // ...
          }
        }
      ]
    })
    
    
 三、组件内的守卫
 你也可以再路由组件内，直接定义一下的路由导航守卫：

 ●beforeRouteEnter

 ●beforeRouteUpdate（2.2新增）

 ●beforeRouteLeave
 
 
const Foo = {
  template: `...`,
  beforeRouteEnter (to, from, next) {
    // 在渲染该组件的对应路由被 confirm 前调用
    // 不！能！获取组件实例 `this`
    // 因为当守卫执行前，组件实例还没被创建
  },
  beforeRouteUpdate (to, from, next) {
    // 在当前路由改变，但是该组件被复用时调用
    // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，
    // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。
    // 可以访问组件实例 `this`
  },
  beforeRouteLeave (to, from, next) {
    // 导航离开该组件的对应路由时调用
    // 可以访问组件实例 `this`
  }

 beforeRouterEnter守卫 不能 访问this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。

 不过，你可以通过传一个回调给next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。
 
 
beforeRouteEnter (to, from, next) {
  next(vm => {
    // 通过 `vm` 访问组件实例
  })
}


完整的导航解析流程
导航被触发
在失活的组件里调用离开守卫
调用全局的beforeEach守卫
在重用的组件里，调用beforeRouteUpdate守卫(2.2+)
在路由配置里调用beforeEnter
解析异步路由组件
在被激活的组件里调用beforeRouterEnter
调用全局的beforeResolve守卫(2.5+)
导航被确认
调用全局的afterEach钩子
触发DOM更新
用创建好的实例调用beforeRouteEnter守卫中传给next的回调函数

vue路由传参的几种方式
//步骤一
<router-link v-bind="{to:'/detail/'+listItem.id}">
   {{listItem.title}}
</router-link
//步骤二
//路由配置文件里面path后面加上'/:id'
{path: '/detail/:id',component: detail}
//步骤三
//这里也可以在生命周期的钩子函数create里面接收id，然后设置id
//detail页面接收传来的id参数
computed: {
    id(){
      return this.$route.params.id;
    }
}

扩展写法
//第二种写法：
<router-link :to="{path:'/detail/'+id}"><router-link>

//第三种写法：
//这里有name的话需要在路由配置文件设置name，如下所示，注意name后面命名的值是唯一的
{path: '/detail/:id',name:'detail',component: detail}
<router-link :to="{name:'detail',params:{id:yourid}}"><router-link>
//to绑定的是name相对应接收时候用的是query
this.$route.query.id;

params相当于get可以在地址栏看到路由传的参数，query相当于post在地址栏看不到传的参数
router.push({ name: 'detail', params: { id: yourid }})
router.push({ path: 'detail', query: { id: yourid }})

         
         
         
         
        
